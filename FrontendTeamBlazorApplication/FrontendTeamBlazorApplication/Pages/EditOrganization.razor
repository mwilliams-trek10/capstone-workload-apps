@page "/editscrumorganization/{ScrumOrganizationId}"
@using FrontendTeamBlazorApplication.Models
@using FrontendTeamBlazorApplication.Services

@inject NavigationManager NavigationManager
@inject ScrumOrganizationService ScrumOrganizationService;

<h3>Edit Scrum Organization</h3>

@if (string.IsNullOrEmpty(ScrumOrganizationId))
{
    <p>
        <em>Unable to locate scrum scrumOrganization!</em>
    </p>
}
else if (this.ScrumOrganization is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm EditContext="_editContext" OnValidSubmit=@OnValidSubmit OnInvalidSubmit=@OnInvalidSubmit >
        <DataAnnotationsValidator />
        <div class="add-boxes">
            <p>
                <label class="input-label">ScrumOrganization Name:</label>
                <InputText @bind-Value=ScrumOrganization.Name id="Name"/>
            </p>
        </div>
        
        @if (_displayValidationMessages)
          {
            <div class="col-md-4" style="margin-top:10px">
              <label hidden="@_hideValidationMessagesLabel">Validation Messages: </label>
              <ValidationSummary />
            </div>
          }
        
        <div>
            <p>
                <input type="submit" value="Submit" class="btn btn-primary" disabled="@_submitDisabled"/>
                <label hidden="@_savingHidden">Saving...</label>
            </p>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public string ScrumOrganizationId { get; set; }

    private bool _savingHidden = true;
    
    private bool _submitDisabled;
    
    private bool _displayValidationMessages;

    private EditScrumOrganization ScrumOrganization { get; set; }

    private EditContext _editContext;
  
    private bool _hideValidationMessagesLabel = true;

    protected override async Task OnInitializedAsync()
    {
        Guid id = Guid.Parse(ScrumOrganizationId);
        var organization = await ScrumOrganizationService.GetScrumOrganizationByIdAsync(id);
        ScrumOrganization = new EditScrumOrganization(organization);
        _editContext = new(ScrumOrganization);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        _submitDisabled = true;
        _savingHidden = false;
        StateHasChanged();
        
        if (context.Model is not EditScrumOrganization scrumOrganization)
        {
            return;
        }
        // SetFormForSaving();
        
        await ScrumOrganizationService.UpdateScrumOrganization(scrumOrganization);

        NavigationManager.NavigateTo("/vieworganizations", true);
    }
    
    private async Task OnInvalidSubmit(EditContext editContext)
    {
        _displayValidationMessages = true;
        _hideValidationMessagesLabel = false;
        _editContext.OnFieldChanged += HideValidationMessageLabel;
    }

    private void HideValidationMessageLabel(object? obj, FieldChangedEventArgs args)
    {
        _hideValidationMessagesLabel = _editContext.Validate();
    }
  
}