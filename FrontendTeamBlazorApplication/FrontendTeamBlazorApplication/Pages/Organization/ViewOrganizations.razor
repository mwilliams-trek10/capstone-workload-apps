@page "/vieworganizations"
@page "/vieworganizations/{MessageId:int}"

@using Services;
@using FrontendTeamBlazorApplication.Models
@inject ScrumOrganizationService ScrumOrganizationService
@inject NavigationManager NavigationManager

<h3>Scrum Organizations</h3>

@if (IsMessageValid())
{
    <div class="row bg-success text-white" style="margin-top:10px; height:40px" hidden="@_hideMessage">
        <label class="p-2">@_messages[MessageId.Value]</label>
    </div>
}

@if (_scrumOrganizations == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Scrum Organization Name</th>
            <th>Id</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var organization in _scrumOrganizations)
        {
            <tr>
                <td>@organization.Name</td>
                <td>@organization.Id</td>
                @* <td><a href="/editorganization/@scrumOrganization.Id.ToString()">Edit</a></td> *@
                <td><input type="button" value="Edit" class="btn btn-link" @onclick="@(() => EditScrumOrganizationButtonClick(@organization))" /></td>
            </tr>
        }
        </tbody>
    </table>
    
    <div>
        <p>
            <input type="submit" value="Add Scrum Organization" class="btn btn-primary" @onclick="@AddNewOrganizationButtonClick">
        </p>
    </div>
}

@code {

    private bool _hideMessage = true;

    private readonly Dictionary<int, string> _messages = new() 
    {
        {1, "Save successful"}
    };

    [Parameter]
    public int? MessageId { get; set; }

    private List<ScrumOrganization> _scrumOrganizations;

    protected override async Task OnInitializedAsync()
    {
        _scrumOrganizations = await ScrumOrganizationService.GetAllScrumOrganizationsAsync();

        if (IsMessageValid())
        {
            _hideMessage = false;
            await Task.Delay(5000).ContinueWith(task => HideMessage());
        }
    }

    private void EditScrumOrganizationButtonClick(ScrumOrganization scrumOrganization)
    {
        NavigationManager.NavigateTo($"/editscrumorganization/{scrumOrganization.Id}", true);
    }

    private void AddNewOrganizationButtonClick()
    {
        _scrumOrganizations = null;
        NavigationManager.NavigateTo("/addscrumorganization", true);
    }

    private bool IsMessageValid()
    {
        return MessageId.HasValue && _messages.ContainsKey(MessageId.Value);
    }

    private void HideMessage()
    {
        _hideMessage = true;
    }

}