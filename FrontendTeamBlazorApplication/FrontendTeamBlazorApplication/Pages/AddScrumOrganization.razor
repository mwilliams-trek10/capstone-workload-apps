@page "/addorganization"
@using FrontendTeamBlazorApplication.Models
@using System.ComponentModel.DataAnnotations
@using FrontendTeamBlazorApplication.Services
@using Microsoft.AspNetCore.Components

@inject ScrumOrganizationService ScrumOrganizationService;
@inject NavigationManager NavigationManager;

<!DOCTYPE html>

<h1>Add a Brand New Organization!</h1>

<br/>

<EditForm EditContext="_editContext" OnValidSubmit=@OnValidSubmit OnInvalidSubmit=@OnInvalidSubmit >
  <DataAnnotationsValidator />
  
  <div class="add-boxes">
    <p>
      <label class="input-label">Organization Name:</label>
      <InputText @bind-Value=Organization.Name id="Name"/>
    </p>
    <p>
      <label class="input-label">Employee Count:</label>
      <InputNumber @bind-Value="Organization.TeamMemberCount "/>
    </p>
    <p>
      <label class="input-label">Scrum Team Count:</label>
      <InputNumber @bind-Value="Organization.ScrumTeamCount"/>
    </p>
  </div>
  
  @if (_displayValidationMessages)
  {
    <div class="col-md-4" style="margin-top:10px">
      <label hidden="@_hideValidationMessagesLabel">Validation Messages: </label>
      <ValidationSummary />
    </div>
  }
  
  <div>
    <p>
      <input type="submit" value="Submit" class="btn btn-primary" disabled="@_addOrganizationDisabled" />
      <label hidden="@_savingHidden" >@_savingLabel</label>
    </p>
  </div>
  
  @if (_saveSuccessful)
  {
    <div class="row bg-success text-white" style="margin-top:10px; height:40px">
      <label class="p-2">Organization successfully saved...</label>
    </div>
  }
  
  @if (_exceptionSaving)
  {
    <div class="row bg-white validation-message" style="margin-top:10px; height:40px">
      <label class="p-2">@_exceptionMessage</label>
    </div>
  }

</EditForm>

@code
{
  private bool _savingHidden = true;
  
  private bool _addOrganizationDisabled;
  
  private string _savingLabel = string.Empty;

  private bool _saveSuccessful;

  private bool _exceptionSaving;

  private string _exceptionMessage;
  
  private bool _displayValidationMessages;
  
  private bool _hideValidationMessagesLabel = true;

  private EditContext _editContext;
  
  [Required]
  private Organization Organization { get; } = new();

  protected override void OnInitialized()
  {
    _editContext = new(Organization);
  }

  private async Task OnValidSubmit(EditContext context)
  {
    if (context.Model is not Organization organization)
    {
      return;
    }
    SetFormForSaving();
    await SaveNewOrganization(organization);
  }

  private void SetFormForSaving()
  {
    _savingHidden = false;
    _savingLabel = "Saving... Please wait.";
    _addOrganizationDisabled = true;
  }

  private void SetFormOnSuccessfulSave()
  {
    _saveSuccessful = true;
    _savingLabel = "Data Saved";
  }

  private async Task SaveNewOrganization(Organization organization)
  {
    try
    {
      await ScrumOrganizationService.AddScrumOrganization(organization);
      //SetFormOnSuccessfulSave();
      NavigationManager.NavigateTo("/vieworganizations/1", true);
    }
    catch(Exception exception)
    {
      _exceptionSaving = true;
      _exceptionMessage = exception.Message;
    }
  }

  private async Task OnInvalidSubmit(EditContext editContext)
  {
    _displayValidationMessages = true;
    _hideValidationMessagesLabel = false;
    _editContext.OnFieldChanged += HideValidationMessageLabel;
  }

  private void HideValidationMessageLabel(object? obj, FieldChangedEventArgs args)
  {
    _hideValidationMessagesLabel = _editContext.Validate();
  }
  
  //127.0.0.1:12345:80 127.0.0.1:12346:443
}